{"version":3,"sources":["../../src/components/SimpleRulesContext.jsx","../../src/components/SimpleRulesProvider.jsx","../../src/hooks/useSchema.jsx","../../src/hooks/useRules.jsx","../../src/hooks/usePermissions/RestrictionChecker.jsx","components/List.jsx","../../src/hooks/usePermissions/usePermissions.jsx","App.js","index.js"],"names":["SimpleRulesContext","createContext","SimpleRules","rulesSchema","userRolesSchema","currentUser","children","readyToUseSchema","rolesMap","useCallback","Object","roleName","roleCheckCondition","setRolesMap","ruleCheck","ruleLogic","record","roles","normalizedSchema","entityName","entitySchema","entityNormalizedSchema","ruleName","Error","normalizeSchema","useSchema","value","useRules","entity","rules","useContext","RestrictionChecker","rule","entityRules","posts","id","content","owner_id","List","postRules","PostPermission","usePermissions","map","post","key","show","destroy","admin","role","App","useState","setCurrentUser","onChange","target","oldCurrentUser","parseInt","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a0d65f3.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nconst SimpleRulesContext = createContext()\n\nexport default SimpleRulesContext\n","import React from 'react'\nimport SimpleRulesContext from './SimpleRulesContext'\nimport useSchema from '../hooks/useSchema'\n\nconst SimpleRules = ({\n  rulesSchema,\n  userRolesSchema,\n  currentUser,\n  children\n}) => {\n  const readyToUseSchema = useSchema(rulesSchema, userRolesSchema, currentUser)\n\n  return (\n    <SimpleRulesContext.Provider value={readyToUseSchema}>\n      {children}\n    </SimpleRulesContext.Provider>\n  )\n}\n\nexport default SimpleRules\n","import { useCallback } from 'react'\n\nconst useSchema = (rulesSchema, userRolesSchema, currentUser) => {\n  const setRolesMap = useCallback(\n    (passedSchema) => {\n      const rolesMap = {}\n\n      Object.entries(passedSchema).forEach(([roleName, roleCheckCondition]) => {\n        rolesMap[roleName] = (actionOwner) => roleCheckCondition(actionOwner)\n      })\n\n      return rolesMap\n    },\n    [currentUser]\n  )\n\n  const rolesMap = setRolesMap(userRolesSchema)\n  const ruleCheck = useCallback(\n    (ruleLogic) => (record) =>\n      ruleLogic({ record, currentUser, roles: rolesMap }),\n    [currentUser, rolesMap]\n  )\n\n  const normalizeSchema = useCallback(\n    (passedSchema) => {\n      const normalizedSchema = {}\n\n      Object.entries(passedSchema).forEach(([entityName, entitySchema]) => {\n        const entityNormalizedSchema = {}\n\n        Object.entries(entitySchema).forEach(([ruleName, ruleLogic]) => {\n          if (ruleLogic instanceof Function) {\n            entityNormalizedSchema[ruleName] = ruleCheck(ruleLogic)\n          } else {\n            throw new Error('Invalid rule format')\n          }\n        })\n\n        normalizedSchema[entityName] = entityNormalizedSchema\n      })\n\n      return normalizedSchema\n    },\n    [currentUser]\n  )\n\n  const normalizedSchema = normalizeSchema(rulesSchema)\n\n  return normalizedSchema\n}\n\nexport default useSchema\n","import { useContext } from 'react'\nimport SimpleRulesContext from '../components/SimpleRulesContext'\n\nconst useRules = (entity) => {\n  const rules = useContext(SimpleRulesContext)\n\n  if (!entity) {\n    throw new Error('Empty entity in simple-rules useRules hook')\n  }\n\n  return rules[entity]\n}\n\nexport default useRules\n","import useRules from '../useRules'\n\nconst RestrictionChecker = ({ rule, record, entity, children }) => {\n  const entityRules = useRules(entity)\n\n  if (entityRules[rule](record)) {\n    return children\n  }\n\n  return null\n}\n\nexport default RestrictionChecker\n","import React from 'react'\nimport { useRules, usePermissions } from 'simple-rule'\n\nconst posts = [\n  { id: 1, content: \"Post visible for user with id = 1\", owner_id: 1 },\n  { id: 2, content: \"Post visible for user with id = 2\", owner_id: 2 },\n  { id: 3, content: \"Post visible for all users, unavailable for destroy\", owner_id: null },\n]\n\nconst List = () => {\n  const postRules = useRules('post')\n  const PostPermission = usePermissions('post')\n\n  return (\n    posts.map((post) => (\n        <div key={post.id}>\n          { postRules.show(post) && `${post.id}. ${post.content}` }\n          <PostPermission rule=\"destroy\" record={post}>\n            (Available for destroy)\n          </PostPermission>\n        </div>\n      )\n    )\n  )\n}\n\nexport default List\n","import React, { useCallback } from 'react'\nimport RestrictionChecker from './RestrictionChecker'\n\nconst usePermissions = (entity) => {\n  if (!entity) {\n    throw new Error('Empty entity in simple-rules usePermissions hook')\n  }\n\n  const RestrictionWrapper = useCallback(\n    ({ rule, record, children }) => (\n      <RestrictionChecker\n        rule={rule}\n        record={record}\n        children={children}\n        entity={entity}\n      />\n    ),\n    [entity]\n  )\n\n  return RestrictionWrapper\n}\n\nexport default usePermissions\n","import React, { useState } from 'react'\nimport { SimpleRulesProvider } from 'simple-rule'\nimport List from './components/List'\n\nconst rulesSchema = {\n  post: {\n    show: ({ currentUser, record, roles }) => (\n      !record.owner_id || record.owner_id === currentUser.id\n    ),\n    destroy: ({ currentUser, record, roles }) => (\n      roles.admin(currentUser) && record.owner_id === currentUser.id\n    ),\n  },\n}\n\nconst userRolesSchema = {\n  admin: (currentUser) => currentUser.role === 'admin'\n}\n\nconst App = () => {\n  const [currentUser, setCurrentUser] = useState({ id: 1, role: 'admin' })\n\n  return (\n    <SimpleRulesProvider rulesSchema={rulesSchema} userRolesSchema={userRolesSchema} currentUser={currentUser}>\n      <p>\n        User id:\n        <select\n          value={currentUser.id}\n          onChange={\n            ({ target: { value } }) => {\n              setCurrentUser((oldCurrentUser) => ({ ...oldCurrentUser, id: parseInt(value) }))\n            }\n          }\n        >\n          <option value={1}>1</option>\n          <option value={2}>2</option>\n          <option value={3}>3</option>\n        </select>\n      </p>\n      <p>\n        User role:\n        <select\n          value={currentUser.role}\n          onChange={\n            ({ target: { value } }) => {\n              setCurrentUser((oldCurrentUser) => ({ ...oldCurrentUser, role: value }))\n            }\n          }\n        >\n          <option value=\"admin\">Admin</option>\n          <option value=\"client\">Client</option>\n        </select>\n      </p>\n      <List />\n    </SimpleRulesProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}